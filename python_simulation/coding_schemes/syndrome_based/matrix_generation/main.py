#!/usr/bin/env python3
"""
Main orchestration script for matrix generation in syndrome-based coding schemes.

This script coordinates the generation of:
1. Hv matrix (parity-check matrix) using greedy algorithm
2. Hu matrix (generated from Hv)
3. Syndrome LUT (lookup table)

Usage:
    python main.py
"""

import sys
from pathlib import Path

# Add parent directories to path for imports
current_dir = Path(__file__).parent
parent_dir = current_dir.parent
sys.path.append(str(parent_dir))

from hv_greedy_algorithm import generate_hv_matrix_entry_point
from hu_generator import generate_hu_entry_point
from generate_lut import generate_syndrome_lut_entry_point


def generate_hv_matrix_with_validation(seed=None):
    """
    Generate Hv matrix using greedy algorithm and validate it.
    
    Args:
        seed (int, optional): Random seed for reproducibility
        output_dir (str, optional): Directory to save output files
        
    Returns:
        tuple: (Hv, identity_matrix, H_extra) if successful, None if failed
    """
    print("="*60)
    print("STEP 1: GENERATING HV MATRIX")
    print("="*60)
    
    # Generate Hv matrix using the entry point function
    result = generate_hv_matrix_entry_point(seed=seed, verbose=False)
    
    if result is not None:
        Hv, identity_matrix, H_extra = result
        print("✓ Hv matrix generation and validation successful!")
        
        # No need to save text files - only Python files are needed
        
        return Hv, identity_matrix, H_extra
    else:
        print("✗ Hv matrix generation failed!")
        return None


def create_generated_H_matrix_file(Hv, Hu, output_dir):
    """
    Create generated_H_matrix.py file that provides the same interface as H_matrix.py
    
    Args:
        Hv: Generated Hv matrix (6x13)
        Hu: Generated Hu matrix (6x32)
        output_dir: Directory to save the file
    """
    output_path = Path(output_dir)
    output_path.mkdir(parents=True, exist_ok=True)
    
    # Create the generated_H_matrix.py file
    h_matrix_file = output_path / "generated_H_matrix.py"
    
    with open(h_matrix_file, 'w') as f:
        f.write('"""\n')
        f.write('Generated H Matrix Module\n')
        f.write('========================\n\n')
        f.write('This module provides the same interface as H_matrix.py but uses\n')
        f.write('generated matrices from the matrix generation process.\n\n')
        f.write('Generated by matrix_generation/main.py\n')
        f.write('"""\n\n')
        f.write('import numpy as np\n')
        f.write('import pandas as pd\n\n')
        
        # Write return_H_V function
        f.write('def return_H_V() -> np.ndarray:\n')
        f.write('    """Return the generated H_V matrix (6×13)"""\n')
        f.write('    return np.array([\n')
        for i, row in enumerate(Hv):
            if i < len(Hv) - 1:
                f.write(f'        {row.tolist()},\n')
            else:
                f.write(f'        {row.tolist()}\n')
        f.write('    ])\n\n')
        
        # Write return_H_U function
        f.write('def return_H_U() -> np.ndarray:\n')
        f.write('    """Return the generated H_U matrix (6×32)"""\n')
        f.write('    return np.array([\n')
        for i, row in enumerate(Hu):
            if i < len(Hu) - 1:
                f.write(f'        {row.tolist()},\n')
            else:
                f.write(f'        {row.tolist()}\n')
        f.write('    ])\n\n')
        
        # Write display_H_matrix function
        f.write('def display_H_matrix(H_matrix: np.ndarray) -> None:\n')
        f.write('    """Display the H matrix in a formatted way using pandas"""\n')
        f.write('    print("H Matrix:")\n')
        f.write('    print("=" * 80)\n')
        f.write('    \n')
        f.write('    H_df = pd.DataFrame(\n')
        f.write('        H_matrix,\n')
        f.write('        index=[f\'Row {i+1}\' for i in range(6)],\n')
        f.write('        columns=[f\'Col {i+1}\' for i in range(45)]\n')
        f.write('    )\n')
        f.write('    print(H_df)\n')
        f.write('    print(f"\\nStructure: Info part (Col 1-32) | Redundancy part (Col 33-45)")\n')
    
    print(f"✓ Generated H matrix file saved to: {h_matrix_file}")


def generate_hu_matrix(Hv, output_dir=None, seed=None):
    """
    Generate Hu matrix from Hv matrix.
    
    Args:
        Hv: Hv matrix
        output_dir (str, optional): Directory to save output files
        seed: Random seed for reproducibility
        
    Returns:
        Hu matrix if successful, None if failed
    """
    print("\n" + "="*60)
    print("STEP 2: GENERATING HU MATRIX")
    print("="*60)
    
    # Generate Hu matrix using the entry point function
    Hu = generate_hu_entry_point(
        Hv=Hv, 
        hu_cols=32, 
        seed=seed, 
        output_dir=output_dir, 
        verbose=False
    )
    
    if Hu is not None:
        print("✓ Hu matrix generation successful!")
        return Hu
    else:
        print("✗ Hu matrix generation failed!")
        return None


def generate_syndrome_lut(Hv, Hu=None, output_dir=None):
    """
    Generate syndrome lookup table from Hv and Hu matrices.
    
    Args:
        Hv: Hv matrix
        Hu: Hu matrix (optional)
        output_dir (str, optional): Directory to save output files
        
    Returns:
        Syndrome LUT if successful, None if failed
    """
    print("\n" + "="*60)
    print("STEP 4: GENERATING SYNDROME LUT")
    print("="*60)
    
    # Generate syndrome LUT using the entry point function
    syndrome_lut = generate_syndrome_lut_entry_point(
        H_V=Hv, 
        output_dir=output_dir, 
        verbose=False
    )
    
    if syndrome_lut is not None:
        print("✓ Syndrome LUT generation successful!")
        return syndrome_lut
    else:
        print("✗ Syndrome LUT generation failed!")
        return None


def main():
    """Main orchestration function."""
    print("MATRIX GENERATION ORCHESTRATOR")
    
    # Default parameters
    seed = 42
    output_dir = Path(__file__).parent / "output"
    
    # Step 1: Generate Hv matrix
    result = generate_hv_matrix_with_validation(seed=seed)
    if result is None:
        print("\n✗ Matrix generation failed. Exiting.")
        return 1
    
    Hv, _, _ = result
    
    # Step 2: Generate Hu matrix
    Hu = generate_hu_matrix(Hv, output_dir=output_dir, seed=seed)
    
    # Step 3: Create generated_H_matrix.py file
    if Hu is not None:
        print("\n" + "="*60)
        print("STEP 3: CREATING GENERATED H MATRIX FILE")
        print("="*60)
        create_generated_H_matrix_file(Hv, Hu, output_dir)
    
    # Step 4: Generate syndrome LUT
    syndrome_lut = generate_syndrome_lut(Hv, Hu, output_dir=output_dir)
    
    print("\n" + "="*60)
    print("GENERATION SUMMARY")
    print("="*60)
    print("✓ Hv matrix: Generated and validated")
    print("✓ Hu matrix: Generated and validated")
    if syndrome_lut is not None:
        print("✓ Syndrome LUT: Generated successfully")
    else:
        print("✗ Syndrome LUT: Generation failed")
    print("="*60)
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
