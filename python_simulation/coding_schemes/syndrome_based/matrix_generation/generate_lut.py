"""
Generate Syndrome Lookup Table (LUT)
====================================

This module generates a coset leaders lookup table for syndrome-based encoding.
The LUT maps each possible syndrome to a minimum-weight coset leader.

Usage:
    python generate_lut.py [H_V_file] [output_file]
    
    If no arguments provided, uses default H_V matrix and writes to syndrome_lut.py
"""

import numpy as np
from typing import Dict, Tuple
from pathlib import Path


def precompute_coset_leaders(H_V: np.ndarray, output_file: str = None) -> Dict[Tuple, np.ndarray]:
    """
    Precompute coset leaders: minimum-weight v for each syndrome s = H_V * v^T
    
    Args:
        H_V: Redundancy matrix (6×13)
        output_file: Path to output file (optional)
        
    Returns:
        Dictionary mapping syndrome tuples to coset leader vectors
    """
    n_V = H_V.shape[1]  # Number of columns in H_V (13)
    
    leaders = {}
    
    print(f"Generating coset leaders for H_V matrix of shape {H_V.shape}")    
    # Iterate all possible v masks (2^13 combinations)
    for i in range(1 << n_V):            
        # Convert integer to binary mask
        v_bits = np.array([(i >> j) & 1 for j in range(n_V)])
        
        # Compute syndrome s = H_V * v^T
        s = (H_V @ v_bits) % 2
        
        # Convert syndrome to tuple key
        s_key = tuple(s)
        
        # Calculate weight of v
        weight = np.sum(v_bits)
        
        # Store minimum-weight v for this syndrome (tie-break by smaller index)
        if s_key not in leaders or weight < leaders[s_key][1] or (weight == leaders[s_key][1] and i < leaders[s_key][2]):
            leaders[s_key] = (v_bits, weight, i)
    
    print(f"Generated {len(leaders)} unique syndromes")
    
    # Write coset leaders to file if specified
    if output_file:
        write_lut_to_file(leaders, output_file)
    
    return leaders


def write_lut_to_file(leaders: Dict[Tuple, np.ndarray], output_file: str) -> None:
    """
    Write coset leaders to a Python file
    
    Args:
        leaders: Dictionary of coset leaders
        output_file: Path to output file
    """    
    with open(output_file, 'w') as f:
        f.write("# Coset Leaders Lookup Table\n")
        f.write("# This file is generated by generate_lut.py\n")
        f.write("# Format: {syndrome_tuple: np.array(v_bits)}\n\n")
        f.write("import numpy as np\n\n")
        f.write("COSET_LEADERS = {\n")
        
        for s_key, (v_bits, _, _) in leaders.items():
            v_bits_str = f"np.array({v_bits.tolist()})"
            f.write(f"    {s_key}: {v_bits_str},\n")
        
        f.write("}\n\n")
        f.write("def get_leader(s_key: tuple):\n")
        f.write("    \"\"\"Get coset leader for given syndrome\"\"\"\n")
        f.write("    return COSET_LEADERS.get(s_key, None)\n")
    
    print(f"Successfully wrote LUT to {output_file}")





def generate_syndrome_lut_entry_point(H_V, output_dir=None, verbose=True):
    """
    Entry point function for syndrome LUT generation.
    
    Args:
        H_V: H_V matrix (6x13)
        output_dir: Directory to save output files
        verbose: Whether to print progress information
        
    Returns:
        Dictionary of coset leaders if successful, None if failed
    """
    if verbose:
        print("="*60)
        print("SYNDROME LUT GENERATION")
        print("="*60)
    
    try:
        # Set output file path
        if output_dir:
            output_path = Path(output_dir)
            output_path.mkdir(parents=True, exist_ok=True)
            output_file = output_path / "generated_syndrome_lut.py"
        else:
            output_file = "generated_syndrome_lut.py"
        
        # Generate coset leaders
        leaders = precompute_coset_leaders(H_V, str(output_file))
        
        if verbose:
            print(f"\nLUT generation complete!")
            print(f"Output file: {output_file}")
            print(f"Number of syndromes: {len(leaders)}")
            print(f"Expected syndromes: 2^6 = 64")
            
            # Verify all syndromes are present
            if len(leaders) == 64:
                print("✅ All syndromes generated successfully!")
            else:
                print(f"⚠️  Warning: Expected 64 syndromes, got {len(leaders)}")
        
        return leaders
        
    except Exception as e:
        if verbose:
            print(f"✗ Error generating syndrome LUT: {e}")
        return None

