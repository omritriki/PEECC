"""
Generate Syndrome Lookup Table (LUT)
====================================

This module generates a coset leaders lookup table for syndrome-based encoding.
The LUT maps each possible syndrome to a minimum-weight coset leader.

Usage:
    python generate_lut.py [H_V_file] [output_file]
    
    If no arguments provided, uses default H_V matrix and writes to syndrome_lut.py
"""

import numpy as np
import sys
import os
from typing import Dict, Tuple
from .H_matrix import return_H_V


def precompute_coset_leaders(H_V: np.ndarray, output_file: str = None) -> Dict[Tuple, np.ndarray]:
    """
    Precompute coset leaders: minimum-weight v for each syndrome s = H_V * v^T
    
    Args:
        H_V: Redundancy matrix (6×13)
        output_file: Path to output file (optional)
        
    Returns:
        Dictionary mapping syndrome tuples to coset leader vectors
    """
    n_V = H_V.shape[1]  # Number of columns in H_V (13)
    
    leaders = {}
    
    print(f"Generating coset leaders for H_V matrix of shape {H_V.shape}...")
    print(f"Computing {2**n_V} possible combinations...")
    
    # Iterate all possible v masks (2^13 combinations)
    for i in range(1 << n_V):
        if i % 1000 == 0:
            print(f"Progress: {i}/{1 << n_V} ({i/(1 << n_V)*100:.1f}%)")
            
        # Convert integer to binary mask
        v_bits = np.array([(i >> j) & 1 for j in range(n_V)])
        
        # Compute syndrome s = H_V * v^T
        s = (H_V @ v_bits) % 2
        
        # Convert syndrome to tuple key
        s_key = tuple(s)
        
        # Calculate weight of v
        weight = np.sum(v_bits)
        
        # Store minimum-weight v for this syndrome (tie-break by smaller index)
        if s_key not in leaders or weight < leaders[s_key][1] or (weight == leaders[s_key][1] and i < leaders[s_key][2]):
            leaders[s_key] = (v_bits, weight, i)
    
    print(f"Generated {len(leaders)} unique syndromes")
    
    # Write coset leaders to file if specified
    if output_file:
        write_lut_to_file(leaders, output_file)
    
    return leaders


def write_lut_to_file(leaders: Dict[Tuple, np.ndarray], output_file: str) -> None:
    """
    Write coset leaders to a Python file
    
    Args:
        leaders: Dictionary of coset leaders
        output_file: Path to output file
    """
    print(f"Writing LUT to {output_file}...")
    
    with open(output_file, 'w') as f:
        f.write("# Coset Leaders Lookup Table\n")
        f.write("# This file is generated by generate_lut.py\n")
        f.write("# Format: {syndrome_tuple: np.array(v_bits)}\n\n")
        f.write("import numpy as np # type: ignore\n\n")
        f.write("COSET_LEADERS = {\n")
        
        for s_key, (v_bits, _, _) in leaders.items():
            v_bits_str = f"np.array({v_bits.tolist()})"
            f.write(f"    {s_key}: {v_bits_str},\n")
        
        f.write("}\n\n")
        f.write("def get_leader(s_key: tuple):\n")
        f.write("    \"\"\"Get coset leader for given syndrome\"\"\"\n")
        f.write("    return COSET_LEADERS.get(s_key, None)\n")
    
    print(f"Successfully wrote LUT to {output_file}")


def load_H_V_from_file(file_path: str) -> np.ndarray:
    """
    Load H_V matrix from a file
    
    Args:
        file_path: Path to file containing H_V matrix
        
    Returns:
        H_V matrix as numpy array
    """
    try:
        # Try to load as numpy array
        H_V = np.load(file_path)
    except:
        try:
            # Try to load as text file
            H_V = np.loadtxt(file_path, dtype=int)
        except:
            raise ValueError(f"Could not load H_V matrix from {file_path}")
    
    if H_V.shape != (6, 13):
        raise ValueError(f"H_V matrix must be 6×13, got {H_V.shape}")
    
    return H_V


def main():
    """Main function to generate LUT"""
    # Parse command line arguments
    if len(sys.argv) > 1:
        H_V_file = sys.argv[1]
        output_file = sys.argv[2] if len(sys.argv) > 2 else "syndrome_lut.py"
        
        print(f"Loading H_V matrix from {H_V_file}...")
        H_V = load_H_V_from_file(H_V_file)
    else:
        # Use default H_V matrix
        print("Using default H_V matrix...")
        H_V = return_H_V()
        # Default to syndrome_lut.py in the same directory as this script
        output_file = os.path.join(os.path.dirname(__file__), "syndrome_lut.py")
    
    # Generate coset leaders
    leaders = precompute_coset_leaders(H_V, output_file)
    
    print(f"\nLUT generation complete!")
    print(f"Output file: {output_file}")
    print(f"Number of syndromes: {len(leaders)}")
    print(f"Expected syndromes: 2^6 = 64")
    
    # Verify all syndromes are present
    if len(leaders) == 64:
        print("✅ All syndromes generated successfully!")
    else:
        print(f"⚠️  Warning: Expected 64 syndromes, got {len(leaders)}")


if __name__ == "__main__":
    main()
