# Coset Leaders Lookup Table
# Format: {syndrome_tuple: np.array(v_bits)}

import numpy as np

COSET_LEADERS = {
    (np.int64(0), np.int64(0), np.int64(0), np.int64(0), np.int64(0), np.int64(0)): np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    (np.int64(1), np.int64(0), np.int64(0), np.int64(0), np.int64(0), np.int64(0)): np.array([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    (np.int64(0), np.int64(1), np.int64(0), np.int64(0), np.int64(0), np.int64(0)): np.array([0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    (np.int64(1), np.int64(1), np.int64(0), np.int64(0), np.int64(0), np.int64(0)): np.array([1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    (np.int64(0), np.int64(0), np.int64(1), np.int64(0), np.int64(0), np.int64(0)): np.array([0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    (np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(0), np.int64(0)): np.array([1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    (np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(0), np.int64(0)): np.array([0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    (np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0), np.int64(0)): np.array([0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0]),
    (np.int64(0), np.int64(0), np.int64(0), np.int64(1), np.int64(0), np.int64(0)): np.array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    (np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(0), np.int64(0)): np.array([1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    (np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(0)): np.array([0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    (np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(0)): np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0]),
    (np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(0)): np.array([0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0]),
    (np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(0)): np.array([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0]),
    (np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)): np.array([0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0]),
    (np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0)): np.array([0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0]),
    (np.int64(0), np.int64(0), np.int64(0), np.int64(0), np.int64(1), np.int64(0)): np.array([0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]),
    (np.int64(1), np.int64(0), np.int64(0), np.int64(0), np.int64(1), np.int64(0)): np.array([1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]),
    (np.int64(0), np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(0)): np.array([0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]),
    (np.int64(1), np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(0)): np.array([0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0]),
    (np.int64(0), np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(0)): np.array([0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0]),
    (np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(0)): np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]),
    (np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0)): np.array([0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0]),
    (np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0)): np.array([0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0]),
    (np.int64(0), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(0)): np.array([0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0]),
    (np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(0)): np.array([0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0]),
    (np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0)): np.array([0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]),
    (np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0)): np.array([0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0]),
    (np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)): np.array([0, 0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0]),
    (np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0)): np.array([0, 0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0]),
    (np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0)): np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]),
    (np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0)): np.array([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0]),
    (np.int64(0), np.int64(0), np.int64(0), np.int64(0), np.int64(0), np.int64(1)): np.array([0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]),
    (np.int64(1), np.int64(0), np.int64(0), np.int64(0), np.int64(0), np.int64(1)): np.array([1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]),
    (np.int64(0), np.int64(1), np.int64(0), np.int64(0), np.int64(0), np.int64(1)): np.array([0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]),
    (np.int64(1), np.int64(1), np.int64(0), np.int64(0), np.int64(0), np.int64(1)): np.array([0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0]),
    (np.int64(0), np.int64(0), np.int64(1), np.int64(0), np.int64(0), np.int64(1)): np.array([0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0]),
    (np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(0), np.int64(1)): np.array([0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]),
    (np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(0), np.int64(1)): np.array([0, 0, 0, 0, 0, 0, 0, 1, 0, 1, 0, 0, 0]),
    (np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(0), np.int64(1)): np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0]),
    (np.int64(0), np.int64(0), np.int64(0), np.int64(1), np.int64(0), np.int64(1)): np.array([0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0, 0]),
    (np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(0), np.int64(1)): np.array([0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0]),
    (np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1)): np.array([0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]),
    (np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1)): np.array([1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]),
    (np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)): np.array([0, 0, 0, 0, 1, 0, 1, 0, 0, 0, 0, 0, 0]),
    (np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1)): np.array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0]),
    (np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(1)): np.array([0, 0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0]),
    (np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(1)): np.array([0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 1, 0]),
    (np.int64(0), np.int64(0), np.int64(0), np.int64(0), np.int64(1), np.int64(1)): np.array([0, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 0, 0]),
    (np.int64(1), np.int64(0), np.int64(0), np.int64(0), np.int64(1), np.int64(1)): np.array([0, 1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]),
    (np.int64(0), np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1)): np.array([1, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]),
    (np.int64(1), np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1)): np.array([0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]),
    (np.int64(0), np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1)): np.array([0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0]),
    (np.int64(1), np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1)): np.array([0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0]),
    (np.int64(0), np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1)): np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1]),
    (np.int64(1), np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1)): np.array([0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0]),
    (np.int64(0), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)): np.array([0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]),
    (np.int64(1), np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1)): np.array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0]),
    (np.int64(0), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)): np.array([0, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0]),
    (np.int64(1), np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1)): np.array([0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 0]),
    (np.int64(0), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)): np.array([0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]),
    (np.int64(1), np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1)): np.array([1, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]),
    (np.int64(0), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(1)): np.array([0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0]),
    (np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(1), np.int64(1)): np.array([0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 0, 0, 0]),
}

def get_leader(s_key: tuple):
    """Get coset leader for given syndrome"""
    return COSET_LEADERS.get(s_key, None)
