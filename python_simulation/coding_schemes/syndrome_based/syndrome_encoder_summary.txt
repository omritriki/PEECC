PEECC - Syndrome-Based Encoder with Automatic LUT Generation
============================================================

DATE: Current session
STATUS: Implemented complete syndrome-based coding system with automatic LUT generation

OVERVIEW:
---------
This module implements a syndrome-based encoder for a 6×45 parity check matrix H = [H_U | H_V].
The system uses coset leaders to achieve optimal encoding with O(1) lookup complexity.
Features automatic LUT generation and supports both minimum-weight and minimum-transitions encoding.

MATHEMATICAL FOUNDATION:
------------------------
- Parity check matrix: H = [H_U | H_V] where H_U is 6×32, H_V is 6×13
- Information vector: u (32 bits)
- Redundancy vector: v (13 bits)
- Syndrome: s = H_U @ u^T (6 bits)
- Codeword constraint: H_U @ u^T + H_V @ v^T = 0
- Column-Space Relation: Every column of H_U lies in the span of H_V columns
- Multiplicity: Each syndrome corresponds to 128 valid redundancy vectors (2^7)

H MATRIX STRUCTURE:
-------------------
- H_V: Fixed 6×13 binary matrix with full rank (rank 6)
- H_U: 6×32 binary matrix generated as linear combinations of H_V columns in GF(2)
- All columns in H_U are unique and distinct from H_V columns
- Matrix satisfies theoretical requirements for syndrome-based encoding

COSET-LEADER APPROACH:
---------------------
- Precomputed lookup table with exactly 64 entries (one per syndrome)
- Each syndrome maps to its coset leader: minimum-weight v s.t. H_V @ v^T = s
- Deterministic selection with lexicographic tie-breaking
- Memory efficient: ~64 entries vs. previous large candidate lists

ENCODING MODES:
---------------
1. Minimum-weight (stateless):
   - Compute s = H_U @ u^T
   - Return v = coset_leader(s)
   - Optimizes absolute weight of redundancy bits

2. Minimum-transitions (stateful):
   - Compute s_curr = H_U @ u^T
   - Compute delta_s = prev_syndrome XOR s_curr
   - Lookup delta_v = coset_leader(delta_s)
   - Set v_curr = prev_v XOR delta_v
   - Optimizes transition cost between consecutive codewords

IMPLEMENTATION DETAILS:
----------------------
Files:
- H_matrix.py: Contains hard-coded H_U and H_V matrices
- generate_lut.py: Standalone script for LUT generation from any H_V matrix
- syndrome_based_encoder.py: Main encoder with automatic LUT generation
- syndrome_lut.py: Generated coset-leader lookup table (auto-generated)

Key Functions:
- precompute_coset_leaders(): Builds LUT with minimum-weight vectors
- encode(): Implements Δ-syndrome flow for minimum transitions
- decode(): Syndrome-based error detection and correction
- get_leader(): Stable LUT API for coset leader lookup

AUTOMATIC LUT GENERATION:
-------------------------
- Encoder automatically generates LUT if syndrome_lut.py is missing
- Standalone generate_lut.py script for custom H_V matrices
- Supports multiple input formats: NumPy arrays (.npy) and text files
- Validates matrix dimensions and generates progress feedback
- Creates LUT in syndrome_based folder with proper file paths

PERFORMANCE CHARACTERISTICS:
---------------------------
Precomputation:
- Complexity: O(2^13) = 8192 iterations (one-time)
- Generates 64 coset leaders
- Writes to syndrome_lut.py in syndrome_based folder

Runtime:
- Lookup complexity: O(1)
- Memory usage: ~64 entries (tiny)
- Transition cost optimization: Maximum 2 bits
- Average transition cost: ~1.78 bits

VALIDATION:
-----------
- LUT integrity: Exactly 64 entries, correct syndromes
- Codeword validation: H_U @ u^T + H_V @ v^T = 0
- Δ-syndrome flow: Transition costs match coset leader weights
- Matrix properties: Binary values, no duplicates, proper dimensions
- Automatic generation: LUT created correctly when missing

ADVANTAGES:
-----------
1. Mathematical optimality: Uses established coset-leader theory
2. Efficiency: O(1) lookup eliminates candidate scanning
3. Flexibility: Supports both stateless and stateful encoding
4. Deterministic: No randomness in encoding decisions
5. Memory efficient: Minimal storage requirements
6. Transition optimization: Minimizes bus switching costs
7. Automatic setup: No manual LUT generation required
8. Customizable: Easy to change H matrix and regenerate LUT

USAGE:
------
Automatic (recommended):
```python
from coding_schemes.syndrome_based.syndrome_based_encoder import SyndromeBasedEncoder
encoder = SyndromeBasedEncoder()  # Automatically generates LUT if needed
```

Manual LUT generation:
```bash
python -m coding_schemes.syndrome_based.generate_lut
python -m coding_schemes.syndrome_based.generate_lut custom_H_V.npy
```

APPLICATIONS:
-------------
- Low-power communication systems
- Bus encoding for reduced switching activity
- Error correction codes with transition cost constraints
- Real-time encoding with minimal computational overhead
- Research and development of syndrome-based coding schemes
